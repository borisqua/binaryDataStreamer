"use strict";
// noinspection jsunusedlocalsymbols
// noinspection JSUnusedLocalSymbols
const
  {Stimuli} = require('mbeeg')
  , {remote, ipcRenderer} = require('electron'), {Keyboard} = require('carousel')
  , {PassThrough} = require('stream')
  , ntStimuli = new PassThrough({objectMode: true})
  , Net = require('net')
  , $ = require('jquery')
  , jQuery = $
;

$(() => {
  /** @namespace config.mbeeg.stimulation.sequence.stimuli */
  let
    config = remote.getGlobal('config')
    , stimuli = new Stimuli({
      stimuliIdArray: config.mbeeg.stimulation.sequence.stimuli,
      duration: config.mbeeg.stimulation.duration,
      pause: config.mbeeg.stimulation.pause,
      nextSequence: arr => {
        let last = arr[arr.length - 1];
        arr.sort(() => Math.random() - 0.5);
        return arr[0] === last ? arr.push(arr.shift()) : arr;
      }
    })
    , keyboard = new Keyboard({
      keyboard: config.carousel.keyboard,
      colorScheme: config.carousel.appearance.colorScheme,
      parametersOfStimulation: config.mbeeg.stimulation,
      stimuli: stimuli
    })
    , request = "none"
    , response = "none"
  ;
  
  function commandSelector(request) {
    switch (request) {
      case "colorSchemeChange":
        /** @namespace config.carousel.appearance */
        keyboard.colorSchemeConfiguration = config.carousel.appearance.colorScheme;
        keyboard.reloadScheme(config.carousel.appearance.colorScheme);//todo>> maybe better put reloadScheme inside colorSchemeConfiguration setter
        break;
      case "keyboardStimulationChange":
        keyboard.keyboardConfiguration = config.carousel.keyboard;
        keyboard.reloadScheme(config.carousel.appearance.colorScheme);//todo>> maybe better put reloadScheme inside keyboardConfiguration setter
        break;
      case "stimuliChange":
        keyboard.stimuliConfiguration = config.mbeeg.stimulation;
        break;
      case "keyboxBordersChange":
        /** @namespace config.carousel.keyboard.keybox */
        keyboard.switchKeyboxBorder(config.carousel.keyboard.keybox.showBorder);
        break;
      case "keyboxSizeChange":
        keyboard.updateKeyboxSize(config.carousel.keyboard.keybox);
        break;
      case "keyboardLayoutChange":
        keyboard.stimuliConfiguration = config.mbeeg.stimulation;
        keyboard
          .run(config.carousel.keyboard)
          .autofit()
        ;
        break;
      case "alphabetChange"://todo?? why redrawing on 'alphabet change' event slightly differ from 'first load' event redrawing??
        keyboard.stimuliConfiguration = config.mbeeg.stimulation;
        keyboard.run(config.carousel.keyboard);
        break;
      case "keyboardRestart"://drop previous input and restart stimulation from beginning with the same settings
        keyboard
          .run(config.carousel.keyboard)
          .text = '';
        break;
      case "keyboardStopStart"://drop previous input and restart stimulation from beginning with the same settings
        keyboard.switchStimulation();
        break;
      case "autofit"://change window size to minimum (maximum compact) form
        keyboard.autofit();
        break;
      case "initialState":
        keyboard.initialState(config.carousel.keyboard.schools);
        break;
      case "motionChange":
        keyboard.motionChange(config.carousel.keyboard.schools);
        break;
      case "animationChange":
        keyboard.keyboardConfiguration = config.carousel.keyboard;
        break;
    }
  }
  
  const
    ntServer = Net.createServer(socket => {
        console.log(`client ${socket.remoteAddress}:${socket.remotePort} connected`);
        //todo>> handling client connections and disconnections
        socket
          .on(`end`, () => {
            ntStimuli.unpipe();
            console.log('end: client disconnected');
          })
          .on(`close`, () => {
            ntStimuli.unpipe();
            console.log('close: client disconnected');
          })
          .on(`error`, () => {
            ntStimuli.unpipe();
            console.log('error: client disconnected');
          })
          .on('data', chunk => {
            let messages = chunk.toString().split(`\r\n`);
            for (let m = 0; m < messages.length; m++) {
              if (messages[m]) {
                
                let
                  action = messages[m].split(':')[0]
                  , params = messages[m].split(':')[1].split(";").slice(0, -1).map((e, i, a) => a[i] = JSON.parse(e))
                ;
                
                switch (action) {
                  case "Flash":
                    config.mbeeg.stimulation.duration = params[0];
                    config.mbeeg.stimulation.pause = params[1];
                    // noinspection JSPrimitiveTypeWrapperUsage
                    config.mbeeg.stimulation.sequence.stimuli = params[2];
                    request = "stimuliChange";
                    response = "200 OK";
                    break;
                  case "Reset":
                    request = "keyboardRestart";
                    response = "200 OK";
                    break;
                  case "StopFlash":
                    request = "keyboardStopStart";
                    response = "200 OK";
                    break;
                  default:
                    request = "none";
                    response = "409 wrong command";
                    console.log("undefined message...");
                }
                commandSelector(request);
              }
            }
          });
        // socket.write(buffer.from(response));
        socket.push(response);
        ntServer.getConnections((err, count) => {
          console.log(`Connections count is ${count}`);
          if (count === 1) {//first connection
            stimuli.on('data', chunk => socket.write(`Flash:${chunk[1]};${chunk[0]};\r\n`));
          }
        });
      })
      .listen({port: config.carousel.tcpserver.port, host: config.carousel.tcpserver.host, exclusive: true}, () => {
        console.log(`\r\n ... carousel nt TCP server started at ${config.carousel.tcpserver.host}:${config.carousel.tcpserver.port} ...\n`);
      })
      .on('close', () => {
        console.log(`carousel nt sever closed.`)
      })
  ;
  
  //EVENT HANDLERS
  // noinspection JSUnresolvedFunction
  keyboard
    .on('keyboardLayoutChange', keyboard => {
      config.carousel.keyboard = keyboard;
      ipcRenderer.send('ipcKeyboard-command', 'keyboardLayoutChange');
    })
  ;

//IPC EVENTS HANDLERS
  ipcRenderer
    .on(`ipcConsole-command`, (e, command) => {
      commandSelector(command);
    })
  ;
  
});
